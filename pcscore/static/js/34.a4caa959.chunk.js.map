{"version":3,"sources":["containers/plan/components/TreeSelect.tsx"],"names":["TreeNode","isChecked","selectedKeys","eventKey","indexOf","TreeTransfer","_ref2","dataSource","targetKeys","restProps","Object","_Users_spoon_WWW_dabai_antd_demo_ts_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_8__","transferDataSource","flatten","arguments","length","undefined","forEach","item","push","children","react__WEBPACK_IMPORTED_MODULE_11___default","a","createElement","antd_es_transfer__WEBPACK_IMPORTED_MODULE_6__","assign","className","render","title","showSelectAll","_ref3","direction","onItemSelect","checkedKeys","concat","_Users_spoon_WWW_dabai_antd_demo_ts_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__","antd_es_tree__WEBPACK_IMPORTED_MODULE_10__","blockNode","checkable","checkStrictly","defaultExpandAll","onCheck","_","_ref4","node","props","onSelect","_ref5","generateTree","treeNodes","map","_ref","disabled","includes","key","selectable","TreeSelect","state","treeData","totalNum","onChange","setTargetKeys","_this","split","reduce","b","Number","setState","computeData","data","sortedData","newItem","keys","el","elKey","r","newR","rKey","num","this","prevProps","boldStyle","fontWeight","titles","style","React","PureComponent"],"mappings":"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","file":"static/js/34.a4caa959.chunk.js","sourcesContent":["import React from 'react';\nimport { Transfer, Tree } from 'antd';\n\nconst { TreeNode } = Tree;\n\n// Customize Table Transfer\nconst isChecked = (selectedKeys: string[], eventKey:string) => {\n  return selectedKeys.indexOf(eventKey) !== -1;\n};\n\nconst generateTree = (treeNodes = [], checkedKeys:string[]=[] ) => {\n\n  return treeNodes.map(({ children, ...props }: {children: any, [k:string]: any}) => (\n    <TreeNode {...props}\n      disabled={checkedKeys.includes(props.key)}\n      key={props.key}\n      checkable={children ? false : true}\n      selectable={children ? false : true}\n    >\n      {generateTree(children, checkedKeys)}\n    </TreeNode>\n  ));\n};\n\nconst TreeTransfer = ({ dataSource, targetKeys, ...restProps }: { targetKeys: string[], [k:string]: any}) => {\n  const transferDataSource:any[] = [];\n  function flatten(list:any[] = []) {\n    list.forEach(item => {\n      transferDataSource.push(item);\n      flatten(item.children);\n    });\n  }\n  flatten(dataSource);\n\n  return (\n    <Transfer\n      {...restProps}\n      targetKeys={targetKeys}\n      dataSource={transferDataSource}\n      className=\"tree-transfer\"\n      render={item => item.title}\n      showSelectAll={false}\n    >\n      {(\n        { direction, onItemSelect, selectedKeys }:\n        { onItemSelect: (key: string, selected: boolean) => any, direction: 'left' | 'right', selectedKeys: any }\n      ) => {\n        if (direction === 'left') {\n          const checkedKeys = [...selectedKeys, ...targetKeys];\n          return (\n            <Tree\n              blockNode\n              checkable\n              checkStrictly\n              defaultExpandAll\n              checkedKeys={checkedKeys}\n              onCheck={(\n                _,\n                {\n                  node: {\n                    props: { eventKey },\n                  },\n                },\n              ) => {\n                onItemSelect(eventKey || '', !isChecked(checkedKeys, eventKey|| ''));\n              }}\n              onSelect={(\n                _,\n                {\n                  node: {\n                    props: { eventKey },\n                  },\n                },\n              ) => {\n                onItemSelect(eventKey||'', !isChecked(checkedKeys, eventKey||''));\n              }}\n            >\n              {generateTree(dataSource, targetKeys)}\n            </Tree>\n          );\n        }\n      }}\n    </Transfer>\n  );\n};\n\ninterface Props {\n  data?: any,\n  setTargetKeys: (keys: string[]) => void,\n  targetKeys: string[],\n}\n\nclass TreeSelect extends React.PureComponent<Props, object> {\n  state = {\n    // targetKeys: this.props.targetKeys || [],\n    treeData: [],\n    totalNum:0,\n  };\n\n  onChange = (targetKeys:string[]) => {\n    const { setTargetKeys } = this.props;\n    setTargetKeys(targetKeys)\n    if (!targetKeys.length) {\n      this.setState({\n        totalNum: 0\n      });\n      return\n    }\n    let totalNum:number = targetKeys.map(item=>+item.split('-')[1]).reduce((a,b):number=>+a+Number(b))\n    this.setState({\n      totalNum\n    });\n  };\n  componentDidMount() {\n    this.computeData(this.props.data)\n  }\n\n  computeData = (data: any[]) => {\n    let sortedData:any = []\n    data.forEach((item: any) => {\n      let newItem:any = {}\n      let key = Object.keys(item)[0]\n      newItem['key'] = key\n      newItem['title'] = key\n      newItem['children'] = []\n      item[key].forEach((el: any) => {\n        let elKey = Object.keys(el)[0]\n        el[elKey].forEach((r: any) => {\n          let newR: any = {}\n          let rKey = Object.keys(r)[0]\n          let num = r[rKey]\n          newR['title'] = elKey+  rKey\n          newR['key'] = `${key}|${elKey}|${rKey}|-${num}`;\n          newItem['children'].push(newR)\n        })\n      })\n      sortedData.push(newItem)\n    })\n    this.setState({treeData: sortedData})\n  }\n  componentDidUpdate(prevProps: any) {\n    if (this.props.data !== prevProps.data) {\n      this.computeData(this.props.data)\n    }\n  }\n\n  render() {\n    const boldStyle = { fontWeight: 600 };\n    return (\n      <div>\n        <TreeTransfer\n          dataSource={this.state.treeData}\n          targetKeys={this.props.targetKeys}\n          onChange={this.onChange}\n          titles={[<span style={boldStyle}>班级</span> , <span style={boldStyle}>已选{this.state.totalNum}人</span>]}\n        />\n      </div>\n    );\n  }\n}\n\nexport default TreeSelect;\n"],"sourceRoot":""}